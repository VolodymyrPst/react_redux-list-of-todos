{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","initialState","status","filterReducer","value","initialTodos","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","title","toLocaleLowerCase","includes","visibleTodos","completed","length","className","map","id","onClick","curentTodoFeat","TodoFilter","setInput","filterAction","onSubmit","event","preventDefault","onChange","e","setFilter","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","email","name","user","setUser","isLoading","setIsLoading","useEffect","getCurentUser","a","userId","Error","currentTodoFeat","href","App","loading","setLoading","getAllTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46fb29dd.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type AllActions = { type: 'ALL', payload: string };\ntype ActiveActions = { type: 'ACTIVE', payload: string };\ntype CompletedActions = { type: 'COMPLETED', payload: string };\ntype InputActions = { type: 'INPUT', payload: string };\n\ntype Action = AllActions | ActiveActions | CompletedActions | InputActions;\n\nconst all = (query: string): Action => ({ type: 'ALL', payload: query });\nconst active = (query: string): Action => ({ type: 'ACTIVE', payload: query });\nconst completed = (query: string): Action => (\n  { type: 'COMPLETED', payload: query });\nconst input = (query: string): Action => ({ type: 'INPUT', payload: query });\n\nexport const actions = {\n  all, active, completed, input,\n};\n\nconst initialState = { query: '', status: 'all' };\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'ALL':\n      return {\n        query: action.payload,\n        status: 'all',\n      };\n    case 'ACTIVE':\n      return {\n        query: action.payload,\n        status: 'active',\n      };\n    case 'COMPLETED':\n      return {\n        query: action.payload,\n        status: 'completed',\n      };\n    case 'INPUT':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/GET',\n  payload: Todo[],\n};\n\nconst setTodos = (value: Todo[]): SetTodosAction => (\n  { type: 'todos/GET', payload: value });\n\nexport const actions = { setTodos };\n\nconst initialTodos: Todo[] = [];\n\nconst todosReducer = (todos = initialTodos, action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/GET':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as curentTodoFeat } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos.filter(\n    (todo: Todo) => {\n      return todo.title.toLocaleLowerCase().includes(filter.query.toLocaleLowerCase());\n    },\n  ));\n\n  const isSelected = (id: number) => currentTodo?.id === id;\n\n  const visibleTodos = () => {\n    switch (filter.status) {\n      case 'all':\n        return todos.filter((todo: Todo) => todo);\n      case 'active':\n        return todos.filter((todo: Todo) => !todo.completed);\n      case 'completed':\n        return todos.filter((todo: Todo) => todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  return (\n    <>\n      {filter.query && !visibleTodos().length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n      <table className=\"table is-narrow is-fullwidth\">\n        { !!visibleTodos().length && (\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n        )}\n\n        <tbody>\n          {visibleTodos().map((todo: Todo) => {\n            return (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    todo.completed ? 'has-text-success' : 'has-text-danger'\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(curentTodoFeat.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={`far ${isSelected(todo.id) ? 'fa-eye-slash' : 'fa-eye'}`} />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { actions as filterAction } from '../../features/filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const filter = useAppSelector(state => state.filter);\n\n  const setFilter = (value: string) => {\n    switch (value) {\n      case 'active':\n        return dispatch(filterAction.active(filter.query));\n      case 'completed':\n        return dispatch(filterAction.completed(filter.query));\n      default:\n        return dispatch(filterAction.all(filter.query));\n    }\n  };\n\n  const setInput = (value: string) => {\n    return dispatch(filterAction.input(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => setFilter(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {filter.query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setInput('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoFeat } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState({ email: '', name: '' });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getCurentUser = async () => {\n      if (!currentTodo) {\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const res = await getUser(currentTodo.userId);\n\n        setUser(res);\n      } catch (error) {\n        throw new Error('Error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCurentUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader />\n        : currentTodo && (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #3\n                {currentTodo.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodoFeat.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo.completed\n                  ? <strong className=\"has-text-danger\">Planned</strong>\n                  : <strong className=\"has-text-success\">Done</strong>}\n                {' by '}\n                <a href={`mailto:${user.email}`}>{`${user.name}`}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const getAllTodos = async () => {\n      try {\n        setLoading(true);\n        const res = await getTodos();\n\n        dispatch(actions.setTodos(res));\n      } catch (error) {\n        throw new Error('Error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getAllTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            { loading ? <Loader /> : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      { currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}